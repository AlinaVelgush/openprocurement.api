stages:
  - build
  - test
  # - deploy
  # - cleanup

variables:
  COUCHDB_USER: op
  COUCHDB_PASSWORD: op
  GIT_STRATEGY: none

Build:
  stage: build
  script:
    - type multiwerf && source <(multiwerf use 1.0 beta)
    - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
    - werf build-and-publish --stages-storage :local
  tags:
    - shell
  except:
    - schedules
  variables:
    GIT_STRATEGY: fetch

.test: &base_test_sandbox
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  stage: test
  services:
    - couchdb:1.6
  tags:
    - docker
  script:
    - cd /app
    - export MODULE_DIR=$(echo $MODULE | sed -e 's/[\ ]/\//g')
    - export MODULE_NAME=$(echo $MODULE | sed -e 's/[\ ]/\./g')
    - py.test src/openprocurement/$MODULE_DIR --cov=openprocurement.$MODULE_NAME -v --color=yes
    - SANDBOX_MODE=True py.test src/openprocurement/$MODULE_DIR --cov=openprocurement.$MODULE_NAME -v --color=yes
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'

test_sandbox_api:
  <<: *base_test_sandbox
  variables:
    MODULE: api

test_sandbox_tender_core:
  <<: *base_test_sandbox
  variables:
    MODULE: tender core

test_sandbox_contracting:
  <<: *base_test_sandbox
  variables:
    MODULE: contracting

test_sandbox_planning:
  <<: *base_test_sandbox
  variables:
    MODULE: planning

test_sandbox_tender_belowthreshold:
  <<: *base_test_sandbox
  variables:
    MODULE: tender belowthreshold

test_sandbox_tender_openua:
  <<: *base_test_sandbox
  variables:
    MODULE: tender openua

test_sandbox_tender_openeu:
  <<: *base_test_sandbox
  variables:
    MODULE: tender openeu

test_sandbox_tender_openuadefense:
  <<: *base_test_sandbox
  variables:
    MODULE: tender openuadefense

test_sandbox_tender_competitivedialogue:
  <<: *base_test_sandbox
  variables:
    MODULE: tender competitivedialogue

test_sandbox_tender_limited:
  <<: *base_test_sandbox
  variables:
    MODULE: tender limited

test_sandbox_tender_esco:
  <<: *base_test_sandbox
  variables:
    MODULE: tender esco

test_sandbox_tender_cfaua:
  <<: *base_test_sandbox
  variables:
    MODULE: tender cfaua

test_sandbox_tender_cfaselectionua:
  <<: *base_test_sandbox
  variables:
    MODULE: tender cfaselectionua
    
test_sandbox_agreement_core:
  <<: *base_test_sandbox
  variables:
    MODULE: agreement core

test_sandbox_agreement_cfaua:
  <<: *base_test_sandbox
  variables:
    MODULE: agreement cfaua

test_sandbox_historical:
  <<: *base_test_sandbox
  variables:
    MODULE: historical

# .base_deploy: &base_deploy
#   stage: deploy
#   script:
#     - type multiwerf && source <(multiwerf use 1.0 beta)
#     - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
#     ## Next command makes deploy and will be discussed further
#     - werf deploy --stages-storage :local
#         --set "global.ci_url=$(echo ${CI_ENVIRONMENT_URL} | cut -d / -f 3)"
#   ## It is important that the deploy stage depends on the build stage. If the build stage fails, deploy stage should not start.
#   dependencies:
#     - Build
#   tags:
#     - werf

# Review:
#   <<: *base_deploy
#   environment:
#     name: review/${CI_COMMIT_REF_SLUG}
#     ## Of course, you need to change domain suffix (`kube.DOMAIN`) of the url if you want to use it in you helm templates.
#     url: http://${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}.kube.DOMAIN
#     on_stop: Stop review
#   only:
#     - branches
#   except:
#     - master
#     - schedules

# Stop review:
#   stage: deploy
#   script:
#     - type multiwerf && source <(multiwerf use 1.0 beta)
#     - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
#     - werf dismiss --with-namespace
#   environment:
#     name: review/${CI_COMMIT_REF_SLUG}
#     action: stop
#   tags:
#     - shell
#   only:
#     - branches
#   except:
#     - master
#     - schedules
#   when: manual

# Deploy to Stage:
#   <<: *base_deploy
#   environment:
#     name: stage
#     url: http://${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}.kube.DOMAIN
#   only:
#     - master
#   except:
#     - schedules

# Cleanup:
#   stage: cleanup
#   script:
#     - type multiwerf && source <(multiwerf use 1.0 beta)
#     - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
#     - docker login -u nobody -p ${WERF_IMAGES_CLEANUP_PASSWORD} ${WERF_IMAGES_REPO}
#     - werf cleanup --stages-storage :local
#   only:
#     - schedules
#   tags:
#     - shell